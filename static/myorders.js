let page_myorders=function(){if(!getCookie("wxok"))return void(window.location.href="/");const lang=localStorage.getItem("language")||"zh",texts={zh:{pageTitle:"我的订单",ordersList:"订单列表",orderDetails:"订单明细",orderNumber:"订单号",orderDate:"订单日期",orderStatus:"订单状态",selectOrderPrompt:"请选择订单查看明细",selectOrderDescription:"点击左侧订单列表中的订单项查看详细信息",noOrders:"暂无订单",noOrdersDescription:"您还没有提交过任何订单",loading:"加载中...",refresh:"刷新",networkError:"网络连接失败",serverError:"服务器错误",loadOrdersError:"加载订单列表失败",loadDetailsError:"加载订单明细失败",orderDetailsLoadError:"订单明细加载失败",orderDetailsLoadErrorDescription:"请刷新页面重试",orderNotFound:"订单不存在或已删除",unauthorized:"无权限访问此订单",materialNumber:"物料号",productName:"商品名称",specification:"规格型号",status:"状态",standard:"执行标准",manufacturer:"生产厂家",heatNumber:"炉批号",stockLength:"库存长度",stockWeight:"库存重量",stockLengthUnit:"库存长度(mm)",stockWeightUnit:"库存重量(kg)",totalItems:"商品总数",totalLength:"总长度",totalWeight:"总重量",totalLengthUnit:"mm",totalWeightUnit:"kg",statusPending:"待处理",statusDone:"已处理",retry:"重试",serialNumber:"序号",itemsCount:"件商品"},en:{pageTitle:"My Orders",ordersList:"Orders List",orderDetails:"Order Details",orderNumber:"Order Number",orderDate:"Order Date",orderStatus:"Order Status",selectOrderPrompt:"Please select an order to view details",selectOrderDescription:"Click on an order item in the left list to view detailed information",noOrders:"No orders found",noOrdersDescription:"You have not submitted any orders yet",loading:"Loading...",refresh:"Refresh",networkError:"Network connection failed",serverError:"Server error",loadOrdersError:"Failed to load orders list",loadDetailsError:"Failed to load order details",orderDetailsLoadError:"Failed to load order details",orderDetailsLoadErrorDescription:"Please refresh the page and try again",orderNotFound:"Order not found or deleted",unauthorized:"Unauthorized to access this order",materialNumber:"Material Number",productName:"Product Name",specification:"Specification",status:"Status",standard:"Standard",manufacturer:"Manufacturer",heatNumber:"Heat Number",stockLength:"Stock Length",stockWeight:"Stock Weight",stockLengthUnit:"Stock Length(mm)",stockWeightUnit:"Stock Weight(kg)",totalItems:"Total Items",totalLength:"Total Length",totalWeight:"Total Weight",totalLengthUnit:"mm",totalWeightUnit:"kg",statusPending:"Pending",statusDone:"Done",retry:"Retry",serialNumber:"Serial No.",itemsCount:" items"}};class OrderManager{constructor(){this.orders=[],this.selectedOrder=null,this.selectedOrderDetails=null,this.isLoading=!1,this.userId=Number(document.querySelector("#user-id").textContent.trim())}async init(){try{await this.getOrdersList()}catch(error){console.error("Failed to initialize OrderManager:",error),notifier.show(texts[lang].loadOrdersError,"danger",4e3)}}async getOrdersList(){if(!this.isLoading)try{this.isLoading=!0,this.showOrdersLoadingState();const response=await fetch("/stock/get_user_orders",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user_id:this.userId})});if(response.ok){const data=await response.json();if(!data.success)throw new Error(data.message||"Failed to get orders");this.orders=data.orders||[],this.renderOrdersList()}else{if(401!==response.status)throw new Error(`Server error: ${response.status}`);window.location.href="/"}}catch(error){console.error("Error loading orders:",error),this.showOrdersErrorState(error.message),notifier.show(texts[lang].loadOrdersError,"danger",4e3)}finally{this.isLoading=!1}}async getOrderDetails(orderId){if(!this.isLoading)try{this.isLoading=!0,this.showDetailsLoadingState();const response=await fetch("/stock/get_order_details",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user_id:this.userId,order_id:orderId})});if(response.ok){const data=await response.json();if(!data.success||!data.order)throw new Error(data.message||texts[lang].orderNotFound);this.selectedOrderDetails=data.order,this.renderOrderDetails(data.order)}else{if(401!==response.status)throw 403===response.status?new Error(texts[lang].unauthorized):404===response.status?new Error(texts[lang].orderNotFound):new Error(`Server error: ${response.status}`);window.location.href="/"}}catch(error){console.error("Error loading order details:",error),this.showDetailsErrorState(error.message),notifier.show(texts[lang].loadDetailsError,"danger",4e3)}finally{this.isLoading=!1}}selectOrder(orderId){this.selectedOrder=orderId,this.updateOrderSelection(),this.getOrderDetails(orderId)}renderOrdersList(){const container=document.getElementById("orders-list");if(0===this.orders.length)return void(container.innerHTML=`\n                    <div class="empty-orders">\n                        <i class="fa fa-list-alt"></i>\n                        <p>${texts[lang].noOrders}</p>\n                    </div>\n                `);let html='<div class="orders-list">';this.orders.forEach((order=>{const statusClass=this.getOrderStatusClass(order.status),statusText=this.getOrderStatusText(order.status);html+=`\n                    <div class="order-item" data-order-id="${order.order_id}" onclick="orderManager.selectOrder('${order.order_id}')">\n                        <div class="order-header">\n                            <div class="order-number">${order.order_id}</div>\n                            <div class="order-status ${statusClass}">${statusText}</div>\n                        </div>\n                        <div class="order-date">${this.formatDate(order.created_at)}</div>\n                    </div>\n                `})),html+="</div>",container.innerHTML=html}renderOrderDetails(orderData){const container=document.querySelector(".order-details-container");if(!orderData||!orderData.items)return void(container.innerHTML=`\n                    <div class="details-prompt">\n                        <i class="fa fa-info-circle"></i>\n                        <p>${texts[lang].selectOrderPrompt}</p>\n                    </div>\n                `);this.getOrderStatusClass(orderData.status),this.getOrderStatusText(orderData.status);let html=`\n                <div class="order-details">                  \n                    <div class="order-items-table">\n                        <table class="table">\n                            <thead>\n                                <tr>\n                                    <th width="4%">序号</th>\n                                    <th>${texts[lang].productName}</th>\n                                    <th>${texts[lang].materialNumber}</th>\n                                    <th>${texts[lang].specification}</th>\n                                    <th>${texts[lang].status}</th>\n                                    <th width="15%">${texts[lang].standard}</th>\n                                    <th>${texts[lang].manufacturer}</th>\n                                    <th>${texts[lang].heatNumber}</th>\n                                    <th>${texts[lang].stockLength}</th>\n                                    <th>${texts[lang].stockWeight}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n            `;orderData.items.forEach(((item,index)=>{html+=`\n                    <tr>\n                        <td>${index+1}</td>\n                        <td>${item.product_name||""}</td>\n                        <td>${item.material_number||""}</td>\n                        <td>${item.specification||""}</td>\n                        <td>${item.status||""}</td>\n                        <td title="${item.standard||""}">${item.standard||""}</td>\n                        <td>${item.manufacturer||""}</td>\n                        <td title="${item.heat_number||""}">${item.heat_number||""}</td>\n                        <td>${item.stock_length||0}</td>\n                        <td>${(item.stock_weight||0).toFixed(2)}</td>\n                    </tr>\n                `})),html+=`\n                            </tbody>\n                        </table>\n                    </div>\n                    \n                    <div class="order-summary">\n                        <div class="summary-item">\n                            <span class="summary-label">${texts[lang].totalItems}:</span>\n                            <span class="summary-value">${orderData.summary?.total_items||0}</span>\n                        </div>\n                        <div class="summary-item">\n                            <span class="summary-label">${texts[lang].totalWeight}:</span>\n                            <span class="summary-value">${(orderData.summary?.total_weight||0).toFixed(2)} kg</span>\n                        </div>\n                    </div>\n                </div>\n            `,container.innerHTML=html}updateOrderSelection(){if(document.querySelectorAll(".order-item").forEach((item=>{item.classList.remove("selected")})),this.selectedOrder){const selectedItem=document.querySelector(`[data-order-id="${this.selectedOrder}"]`);selectedItem&&selectedItem.classList.add("selected")}}showOrdersLoadingState(){document.getElementById("orders-list").innerHTML=`\n                <div class="loading-state">\n                    <i class="fa fa-spinner fa-spin"></i>\n                    <p>${texts[lang].loading}</p>\n                </div>\n            `}showDetailsLoadingState(){document.querySelector(".order-details-container").innerHTML=`\n                <div class="loading-state">\n                    <i class="fa fa-spinner fa-spin"></i>\n                    <p>${texts[lang].loading}</p>\n                </div>\n            `}showOrdersErrorState(errorMessage){document.getElementById("orders-list").innerHTML=`\n                <div class="error-state">\n                    <i class="fa fa-exclamation-triangle"></i>\n                    <p>${errorMessage||texts[lang].loadOrdersError}</p>\n                    <button class="btn btn-primary" onclick="orderManager.getOrdersList()">\n                        ${texts[lang].retry}\n                    </button>\n                </div>\n            `}showDetailsErrorState(errorMessage){document.querySelector(".order-details-container").innerHTML=`\n                <div class="error-state">\n                    <i class="fa fa-exclamation-triangle"></i>\n                    <p>${errorMessage||texts[lang].loadDetailsError}</p>\n                </div>\n            `}getOrderStatusClass(status){switch(status){case"pending":return"status-pending";case"done":return"status-done";default:return"status-unknown"}}getOrderStatusText(status){switch(status){case"pending":return texts[lang].statusPending;case"done":return texts[lang].statusDone;default:return status||""}}formatDate(dateString){if(!dateString)return"";try{return new Date(dateString).toLocaleString("zh"===lang?"zh-CN":"en-US")}catch(error){return dateString}}}class MyOrdersPageController{constructor(){this.orderManager=new OrderManager}async initPage(){document.title=texts[lang].pageTitle,this.updatePageTexts(),this.bindEventListeners(),await this.orderManager.init(),this.showDefaultPrompt()}updatePageTexts(){const pageTitle=document.querySelector(".myorders-title");pageTitle&&(pageTitle.innerHTML=`<i class="fa fa-list-alt"></i>${texts[lang].pageTitle}`);const refreshBtn=document.querySelector("#refresh-orders-btn");refreshBtn&&(refreshBtn.innerHTML=`<i class="fa fa-refresh"></i>${texts[lang].refresh}`);const ordersListHeader=document.querySelector(".orders-list-section h3");ordersListHeader&&(ordersListHeader.textContent=texts[lang].ordersList);const orderDetailsTitle=document.querySelector("#order-details-title");orderDetailsTitle&&(orderDetailsTitle.textContent=texts[lang].orderDetails),this.updateTableHeaders(),this.updateEmptyStates()}updateTableHeaders(){const tableHeaders=document.querySelectorAll(".order-details-table-container th");if(tableHeaders.length>0){const headerTexts=[texts[lang].serialNumber,texts[lang].productName,texts[lang].materialNumber,texts[lang].specification,texts[lang].status,texts[lang].standard,texts[lang].manufacturer,texts[lang].heatNumber,texts[lang].stockLengthUnit,texts[lang].stockWeightUnit];tableHeaders.forEach(((header,index)=>{headerTexts[index]&&(header.textContent=headerTexts[index])}))}}updateEmptyStates(){const emptyMessage=document.querySelector("#empty-orders .empty-message"),emptyDescription=document.querySelector("#empty-orders .empty-description");emptyMessage&&(emptyMessage.textContent=texts[lang].noOrders),emptyDescription&&(emptyDescription.textContent=texts[lang].noOrdersDescription);const defaultMessage=document.querySelector("#default-details-state .default-message"),defaultDescription=document.querySelector("#default-details-state .default-description");defaultMessage&&(defaultMessage.textContent=texts[lang].selectOrderPrompt),defaultDescription&&(defaultDescription.textContent=texts[lang].selectOrderDescription);const emptyDetailsMessage=document.querySelector("#empty-details .empty-message"),emptyDetailsDescription=document.querySelector("#empty-details .empty-description");emptyDetailsMessage&&(emptyDetailsMessage.textContent=texts[lang].orderDetailsLoadError),emptyDetailsDescription&&(emptyDetailsDescription.textContent=texts[lang].orderDetailsLoadErrorDescription);const infoLabels=document.querySelectorAll(".order-info .info-label");infoLabels.length>=3&&(infoLabels[0].textContent=texts[lang].orderNumber+"：",infoLabels[1].textContent=texts[lang].orderDate+"：",infoLabels[2].textContent=texts[lang].orderStatus+"：");const summaryLabels=document.querySelectorAll(".order-summary .summary-label");summaryLabels.length>=3&&(summaryLabels[0].textContent=texts[lang].totalItems+"：",summaryLabels[1].textContent=texts[lang].totalLength+"：",summaryLabels[2].textContent=texts[lang].totalWeight+"：")}bindEventListeners(){const refreshBtn=document.getElementById("refresh-orders-btn");refreshBtn&&refreshBtn.addEventListener("click",(()=>{this.handlePageRefresh()})),document.addEventListener("keydown",(e=>{"Escape"===e.key&&this.clearSelection()})),window.addEventListener("resize",(()=>{this.adjustLayout()}))}handleOrderItemClick(orderId){this.orderManager.selectOrder(orderId)}async handlePageRefresh(){try{await this.orderManager.getOrdersList(),this.showDefaultPrompt()}catch(error){console.error("Error refreshing page:",error)}}showDefaultPrompt(){if(!this.orderManager.selectedOrder){document.querySelector(".order-details-container").innerHTML=`\n                    <div class="details-prompt">\n                        <i class="fa fa-info-circle"></i>\n                        <p>${texts[lang].selectOrderPrompt}</p>\n                    </div>\n                `}}clearSelection(){this.orderManager.selectedOrder=null,this.orderManager.selectedOrderDetails=null,this.orderManager.updateOrderSelection(),this.showDefaultPrompt()}adjustLayout(){}showLoadingState(){this.orderManager.showOrdersLoadingState(),this.orderManager.showDetailsLoadingState()}hideLoadingState(){}}let orderManager=null,pageController=null;function initPage(){pageController=new MyOrdersPageController,orderManager=pageController.orderManager,window.orderManager=orderManager,pageController.initPage()}return"loading"===document.readyState?document.addEventListener("DOMContentLoaded",initPage):initPage(),window.addEventListener("languageChanged",(function(event){pageController&&(pageController.updatePageTexts(),orderManager&&(orderManager.renderOrdersList(),orderManager.selectedOrderDetails&&orderManager.renderOrderDetails(orderManager.selectedOrderDetails)))})),{orderManager:()=>orderManager,pageController:()=>pageController,texts:texts,updateLanguage:function(newLang){texts[newLang]&&(localStorage.setItem("language",newLang),window.location.reload())}}}();